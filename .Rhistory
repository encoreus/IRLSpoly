Pb = rowSums(P);cPb = cumsum(Pb);r = length(Pb)
a = qnorm(cPa);a[s] = 1e8;a = c(-1e8,a)
b = qnorm(cPb);b[r] = 1e8;b = c(-1e8,b)
Pl = matrix(P,1,s*r)
B = t(Pl)%*%Pl
B = diag(Pl[1,])-B
B = B/N
if(ct){
rho0 = 0
}else{
rho0 = tryCatch({cor(x,y)},
warning=function(w){0},
error=function(e){0}
)
}
ex = (dnorm(a[1:s])-dnorm(a[2:(s+1)]))/Pa
Pw1 = t(t(P)/Pa)
Pw2 = P/Pb
iter = 0
dif = 1
Sigma1 = diag(length(ex))
Ex = c()
Ey = c()
while((iter<maxn)&(dif>e)){
midy = matrix(0,r,s)
for (i in 1:r) {
mid1 = (b[i]-rho0*ex)/sqrt(1-rho0^2)
mid2 = (b[i+1]-rho0*ex)/sqrt(1-rho0^2)
midy[i,] = rho0*ex + sqrt(1-rho0^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
EY = colSums(Pw1*midy)
Ex = cbind(Ex,ex)
Ey = cbind(Ey,EY)
D = matrix(rep(0,s*s*r),s,s*r)
for (i in 1:s) {
P_i = diag(rep(Pa[i],r))-t(matrix(rep(P[,i],r),r,r))
D[i,(1+(i-1)*r):(i*r)] = P_i%*%midy[,i]/(Pa[i]^2)
}
Sigma = D%*%B%*%t(D)
if(sum(is.na(Sigma)>0)){
Sigma = Sigma1
warning("NA appears during the calculation of covariance matrix, and the result may be unstable.
Check whether your data is a 2 * 2 contingency table with empty cell.")
break
}
#if(is.singular.matrix(Sigma)){Sigma = diag(s)/length(x)}
rho = solve(t(ex)%*%solve(Sigma)%*%ex)%*%t(ex)%*%solve(Sigma)%*%EY
rho = rho[1,1]
if(is.na(rho)){rho = cor(x,y)}
if(rho>=1){
rho=1-1e-4
}else if(rho<=-1){
rho = -1+1e-4}
dif = abs(rho-rho0)
EYx = rowSums(Pw2*midy)
midx = matrix(rep(0,r*s),r,s)
for (i in 1:s) {
mid1 = (a[i]-rho*EYx)/sqrt(1-rho^2)
mid2 = (a[i+1]-rho*EYx)/sqrt(1-rho^2)
midx[,i] = rho*EYx + sqrt(1-rho^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
ex = colSums(Pw1*midx)
Sigma1 = Sigma
rho0 = rho
iter = iter + 1
}
if(iter>=maxn){
warning('The number of iterations reaches the upper limit. Your dataset may be fragile.')
}
Eindex = max((1:ncol(Ex))[!is.na(colSums(rbind(Ex,Ey)))])
ex = Ex[,Eindex]
varrho = solve(t(ex)%*%solve(Sigma)%*%ex)
return(list(rho=rho,
std = sqrt(varrho[1,1]),
iter = iter,
Ex = Ex,
Ey = Ey))
}
esti_polychoric(t(p1),ct=T)
esti_polychoric(matrix(c(0,100,200,300),2,2),ct=T)
esti_polychoric <- function(X,maxn=100,e=1e-8,ct = FALSE){
if(ct){
N = sum(X)
P = X/N
}else if(is.data.frame(X)){
x = X[,1]
y = X[,2]
N = sum(table(y,x))
P = table(y,x)/N
}else{
x = X[1,]
y = X[2,]
N = sum(table(y,x))
P = table(y,x)/N
}
rindex = rowSums(P!=0)
if(sum(rindex==0)>0){
P = P[!rindex==0,]
wm = paste('remove',as.character(sum(rindex==0)),'rows that all 0')
warning(wm)
}
cindex = colSums(P!=0)
if(sum(cindex==0)>0){
P = P[,!cindex==0]
wm = paste('remove',as.character(sum(cindex==0)),'columns that all 0')
warning(wm)
}
if((nrow(P)<=1)|(ncol(P)<=1)){
stop('The number of rows or columns in the contingency table is 1.')
}
rindex = rowSums(P!=0)
cindex = colSums(P!=0)
if((sum(rindex==1)==0)&(sum(cindex==1)>0)){
P = t(P)
}else if((sum(rindex==1)>0)&(sum(cindex==1)>0)){
P[,cindex==1][P[,cindex==1]==0]=1/N^3
P = P/sum(P)
}
if(N<100){
warning('Estimated std may smaller than true std due to the small sample size.')
}
Pa = colSums(P);cPa = cumsum(Pa);s = length(Pa)
Pb = rowSums(P);cPb = cumsum(Pb);r = length(Pb)
a = qnorm(cPa);a[s] = 1e8;a = c(-1e8,a)
b = qnorm(cPb);b[r] = 1e8;b = c(-1e8,b)
Pl = matrix(P,1,s*r)
B = t(Pl)%*%Pl
B = diag(Pl[1,])-B
B = B/N
if(ct){
rho0 = 0
}else{
rho0 = tryCatch({cor(x,y)},
warning=function(w){0},
error=function(e){0}
)
}
ex = (dnorm(a[1:s])-dnorm(a[2:(s+1)]))/Pa
Pw1 = t(t(P)/Pa)
Pw2 = P/Pb
iter = 0
dif = 1
Sigma1 = diag(length(ex))
Ex = c()
Ey = c()
while((iter<maxn)&(dif>e)){
midy = matrix(0,r,s)
for (i in 1:r) {
mid1 = (b[i]-rho0*ex)/sqrt(1-rho0^2)
mid2 = (b[i+1]-rho0*ex)/sqrt(1-rho0^2)
midy[i,] = rho0*ex + sqrt(1-rho0^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
EY = colSums(Pw1*midy)
Ex = cbind(Ex,ex)
Ey = cbind(Ey,EY)
D = matrix(rep(0,s*s*r),s,s*r)
for (i in 1:s) {
P_i = diag(rep(Pa[i],r))-t(matrix(rep(P[,i],r),r,r))
D[i,(1+(i-1)*r):(i*r)] = P_i%*%midy[,i]/(Pa[i]^2)
}
Sigma = D%*%B%*%t(D)
if(sum(is.na(Sigma)>0)){
Sigma = Sigma1
warning("NA appears during the calculation of covariance matrix, and the result may be unstable.
Check whether your data is a 2 * 2 contingency table with empty cell.")
break
}
#if(is.singular.matrix(Sigma)){Sigma = diag(s)/length(x)}
rho = solve(t(ex)%*%solve(Sigma)%*%ex)%*%t(ex)%*%solve(Sigma)%*%EY
rho = rho[1,1]
if(is.na(rho)){rho = cor(x,y)}
if(rho>=1){
rho=1-1e-4
}else if(rho<=-1){
rho = -1+1e-4}
dif = abs(rho-rho0)
EYx = rowSums(Pw2*midy)
midx = matrix(rep(0,r*s),r,s)
for (i in 1:s) {
mid1 = (a[i]-rho*EYx)/sqrt(1-rho^2)
mid2 = (a[i+1]-rho*EYx)/sqrt(1-rho^2)
midx[,i] = rho*EYx + sqrt(1-rho^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
ex = colSums(Pw1*midx)
Sigma1 = Sigma
rho0 = rho
iter = iter + 1
}
if(iter>=maxn){
warning('The number of iterations reaches the upper limit. Your dataset may be fragile.')
}
# Eindex = max((1:ncol(Ex))[!is.na(colSums(rbind(Ex,Ey)))])
# ex = Ex[,Eindex]
varrho = solve(t(ex)%*%solve(Sigma)%*%ex)
return(list(rho=rho,
std = sqrt(varrho[1,1]),
iter = iter,
Ex = Ex,
Ey = Ey))
}
esti_polychoric(t(p1),ct=T)
esti_polychoric <- function(X,maxn=100,e=1e-8,ct = FALSE){
if(ct){
N = sum(X)
P = X/N
}else if(is.data.frame(X)){
x = X[,1]
y = X[,2]
N = sum(table(y,x))
P = table(y,x)/N
}else{
x = X[1,]
y = X[2,]
N = sum(table(y,x))
P = table(y,x)/N
}
rindex = rowSums(P!=0)
if(sum(rindex==0)>0){
P = P[!rindex==0,]
wm = paste('remove',as.character(sum(rindex==0)),'rows that all 0')
warning(wm)
}
cindex = colSums(P!=0)
if(sum(cindex==0)>0){
P = P[,!cindex==0]
wm = paste('remove',as.character(sum(cindex==0)),'columns that all 0')
warning(wm)
}
if((nrow(P)<=1)|(ncol(P)<=1)){
stop('The number of rows or columns in the contingency table is 1.')
}
rindex = rowSums(P!=0)
cindex = colSums(P!=0)
if((sum(rindex==1)==0)&(sum(cindex==1)>0)){
P = t(P)
}else if((sum(rindex==1)>0)&(sum(cindex==1)>0)){
P[,cindex==1][P[,cindex==1]==0]=1/N^3
P = P/sum(P)
}
if(N<100){
warning('Estimated std may smaller than true std due to the small sample size.')
}
Pa = colSums(P);cPa = cumsum(Pa);s = length(Pa)
Pb = rowSums(P);cPb = cumsum(Pb);r = length(Pb)
a = qnorm(cPa);a[s] = 1e8;a = c(-1e8,a)
b = qnorm(cPb);b[r] = 1e8;b = c(-1e8,b)
Pl = matrix(P,1,s*r)
B = t(Pl)%*%Pl
B = diag(Pl[1,])-B
B = B/N
if(ct){
rho0 = 0
}else{
rho0 = tryCatch({cor(x,y)},
warning=function(w){0},
error=function(e){0}
)
}
ex = (dnorm(a[1:s])-dnorm(a[2:(s+1)]))/Pa
Pw1 = t(t(P)/Pa)
Pw2 = P/Pb
iter = 0
dif = 1
Sigma1 = diag(length(ex))
Ex = c()
Ey = c()
while((iter<maxn)&(dif>e)){
midy = matrix(0,r,s)
for (i in 1:r) {
mid1 = (b[i]-rho0*ex)/sqrt(1-rho0^2)
mid2 = (b[i+1]-rho0*ex)/sqrt(1-rho0^2)
midy[i,] = rho0*ex + sqrt(1-rho0^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
EY = colSums(Pw1*midy)
Ex = cbind(Ex,ex)
Ey = cbind(Ey,EY)
D = matrix(rep(0,s*s*r),s,s*r)
for (i in 1:s) {
P_i = diag(rep(Pa[i],r))-t(matrix(rep(P[,i],r),r,r))
D[i,(1+(i-1)*r):(i*r)] = P_i%*%midy[,i]/(Pa[i]^2)
}
Sigma = D%*%B%*%t(D)
if(sum(is.na(Sigma)>0)){
Sigma = Sigma1
warning("NA appears during the calculation of covariance matrix, and the result may be unstable.
Check whether your data is a 2 * 2 contingency table with empty cell.")
break
}
#if(is.singular.matrix(Sigma)){Sigma = diag(s)/length(x)}
rho = solve(t(ex)%*%solve(Sigma)%*%ex)%*%t(ex)%*%solve(Sigma)%*%EY
rho = rho[1,1]
if(is.na(rho)){rho = cor(x,y)}
if(rho>=1){
rho=1-1e-4
}else if(rho<=-1){
rho = -1+1e-4}
dif = abs(rho-rho0)
EYx = rowSums(Pw2*midy)
midx = matrix(rep(0,r*s),r,s)
for (i in 1:s) {
mid1 = (a[i]-rho*EYx)/sqrt(1-rho^2)
mid2 = (a[i+1]-rho*EYx)/sqrt(1-rho^2)
midx[,i] = rho*EYx + sqrt(1-rho^2)*(dnorm(mid1)-dnorm(mid2))/(pnorm(mid2)-pnorm(mid1))
}
ex = colSums(Pw1*midx)
Sigma1 = Sigma
rho0 = rho
iter = iter + 1
}
if(iter>=maxn){
warning('The number of iterations reaches the upper limit. Your dataset may be fragile.')
}
Eindex = max((1:ncol(Ex))[!is.na(colSums(rbind(Ex,Ey)))])
ex = Ex[,Eindex]
varrho = solve(t(ex)%*%solve(Sigma)%*%ex)
return(list(rho=rho,
std = sqrt(varrho[1,1]),
iter = iter,
Ex = Ex,
Ey = Ey))
}
esti_polychoric(t(p1),ct=T)
polycor::polychor(t(p1),ML=T,std.err = T)
p1
polycor::polychor(matrix(c(0,100,200,300),2,2),ML=T,std.err = T)
library(devtools)
check('../IRLSpoly/')
build('../IRLSpoly/')
build('../IRLSpoly')
help(rug)
help(jitter)
library(lattice)
help("splom")
help(cor.wt)
is.null(wt)
help(rug)
help("hist")
check('../IRLSpoly/')
pairs.panels1 <- function (x, MLE=FALSE, smooth = TRUE, scale = FALSE, density = TRUE, ellipses = TRUE,
pch = 20, jiggle = FALSE, factor = 2, hist.col = "cyan", show.points = TRUE,
rug = TRUE, breaks = "Sturges", cex.cor = 1, wt = NULL, smoother = FALSE,
stars = FALSE, ci = FALSE, alpha = 0.05, ...)
{
"panel.hist.density" <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1], usr[2], 0, 1.5))
tax <- table(x)
if (length(tax) < 11) {
breaks <- as.numeric(names(tax))
y <- tax/max(tax)
interbreak <- min(diff(breaks)) * (length(tax) - 1)/41
rect(breaks - interbreak, 0, breaks + interbreak, y, col = hist.col)
}
else {
h <- hist(x, breaks = breaks, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = hist.col)
}
if (density) {
tryd <- try(d <- density(x, na.rm = TRUE, bw = "nrd",
adjust = 1.2), silent = TRUE)
if (class(tryd) != "try-error") {
d$y <- d$y/max(d$y)
lines(d)
}
}
if (rug) {rug(x)}
}
"panel.cor" <- function(x, y, prefix = "", ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
if (is.null(wt)) {
if(MLE){
dat <- data.frame(x, y)
dat <- na.omit(dat)
dat = as.matrix(dat)
out1 = polycor::polychor(dat[,1],dat[,2],ML=T,std.err = T)
r = sprintf("%0.4f", out1$rho)
std = sprintf("%0.4f", sqrt(out1$var[1,1]))
rs = paste(r,'\n')
rs = paste(rs,'(',sep = '')
rs = paste(rs,std,sep = '')
rs = paste(rs,')',sep = '')
}else{
dat <- cbind(x, y)
dat <- dat[apply(is.na(dat), 1, sum) == 0, ]
out1 = esti_polychoric(t(as.matrix(dat)))
r = sprintf("%0.4f", out1$rho)
std = sprintf("%0.4f", out1$std)
rs = paste(r,'\n')
rs = paste(rs,'(',sep = '')
rs = paste(rs,std,sep = '')
rs = paste(rs,')',sep = '')
}
}
else {
r <- cor.wt(data.frame(x, y), w = wt[, c(1:2)])$r[1,2]
}
txt = rs
txt <- paste(prefix, txt, sep = "")
if (stars) {
pval <- r.test(sum(!is.na(x * y)), r)$p
symp <- symnum(pval, corr = FALSE, cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", " "), legend = FALSE)
txt <- paste0(txt, symp)
}
cex <- cex.cor * 0.8/(max(strwidth("0.12***"), strwidth(txt)))
if (scale) {
cex1 <- cex * abs(r)
if (cex1 < 0.25)
cex1 <- 0.25
text(0.5, 0.5, txt, cex = cex1)
}
else {
text(0.5, 0.5, txt, cex = cex)
}
}
"panel.smoother" <- function(x, y, pch = par("pch"), col.smooth = "red",
span = 2/3, iter = 3, ...) {
xm <- mean(x, na.rm = TRUE)
ym <- mean(y, na.rm = TRUE)
xs <- sd(x, na.rm = TRUE)
ys <- sd(y, na.rm = TRUE)
if(MLE){
r = polycor::polychor(x,y,ML=T,std.err = F)
}else{
dat <- cbind(x, y)
dat <- dat[apply(is.na(dat), 1, sum) == 0, ]
x <- dat[,1]
y <- dat[,2]
r <- esti_polychoric(t(as.matrix(dat)))$rho
}
if (jiggle) {
x <- jitter(x, factor = factor)
y <- jitter(y, factor = factor)
}
if (smoother) {
smoothScatter(x, y, add = TRUE, nrpoints = 0)
}
else {
if (show.points)
points(x, y, pch = pch, ...)
}
ok <- is.finite(x) & is.finite(y)
if (any(ok)) {
if (smooth & ci) {
lml <- loess(y ~ x, degree = 1, family = "symmetric")
tempx <- data.frame(x = seq(min(x, na.rm = TRUE),
max(x, na.rm = TRUE), length.out = 47))
pred <- predict(lml, newdata = tempx, se = TRUE)
if (ci) {
upperci <- pred$fit + confid * pred$se.fit
lowerci <- pred$fit - confid * pred$se.fit
polygon(c(tempx$x, rev(tempx$x)), c(lowerci, rev(upperci)),
col = adjustcolor("light grey", alpha.f = 0.8), border = NA)
}
lines(tempx$x, pred$fit, col = col.smooth, ...)
}
else {
if (smooth)
lines(stats::lowess(x[ok], y[ok], f = span,
iter = iter), col = col.smooth)
}
}
if (ellipses)
draw.ellipse(xm, ym, xs, ys, r, col.smooth = col.smooth,
...)
}
"draw.ellipse" <- function(x = 0, y = 0, xs = 1, ys = 1,
r = 0, col.smooth, add = TRUE, segments = 51, ...) {
angles <- (0:segments) * 2 * pi/segments
unit.circle <- cbind(cos(angles), sin(angles))
if (!is.na(r)) {
if (abs(r) > 0)
theta <- sign(r)/sqrt(2)
else theta = 1/sqrt(2)
shape <- diag(c(sqrt(1 + r), sqrt(1 - r))) %*% matrix(
c(theta, theta, -theta, theta), ncol = 2, byrow = TRUE)
ellipse <- unit.circle %*% shape
ellipse[, 1] <- ellipse[, 1] * xs + x
ellipse[, 2] <- ellipse[, 2] * ys + y
if (show.points)
points(x, y, pch = 19, col = col.smooth, cex = 1.5)
lines(ellipse, ...)
}
}
old.par <- par(no.readonly = TRUE)
on.exit(par(old.par))
if (missing(cex.cor))
cex.cor <- 1
for (i in 1:ncol(x)) {
if (is.character(x[[i]])) {
x[[i]] <- as.numeric(as.factor(x[[i]]))
colnames(x)[i] <- paste(colnames(x)[i], "*", sep = "")
}
}
n.obs <- nrow(x)
confid <- qt(1 - alpha/2, n.obs - 2)
pairs(x, diag.panel = panel.hist.density, upper.panel = panel.cor,
lower.panel = panel.smoother, pch = pch)
}
check('../IRLSpoly/')
build('../IRLSpoly/')
build('../IRLSpoly')
build('../IRLSpoly')
build('../IRLSpoly')
check('../IRLSpoly/')
