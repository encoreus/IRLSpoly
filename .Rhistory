set.seed(1997)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm0 <- lm(EY[,1]~0 + EX[,1])
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
#abline(lm0, col='red')
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(a=-1)
set.seed(1997)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm0 <- lm(EY[,1]~0 + EX[,1])
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
#abline(lm0, col='red')
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(a=-1,b=0)
abline(a=0,b=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
#dev.off()
set.seed(1997)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm0 <- lm(EY[,1]~0 + EX[,1])
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
#abline(lm0, col='red')
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(a=-1,b=0)
abline(a=0,b=0)
abline(a=0,b=Inf)
set.seed(1997)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm0 <- lm(EY[,1]~0 + EX[,1])
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
#abline(lm0, col='red')
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
#dev.off()
set.seed(1997)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm0 <- lm(EY[,1]~0 + EX[,1])
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
#abline(lm0, col='red')
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
#dev.off()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
#abline(lm1)
#pdf('vertaxc1.pdf') # draw conditional X and Y
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
#points(cbind(V[1,1],V[1,3]),pch='*',col='red',type='b',lty=3)
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
#dev.off()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
points(cbind(EX[1,2:iter],EY[1,2:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,2:iter],EY[2,2:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,2:iter],EY[3,2:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
points(cbind(EX[1,1:iter],EY[1,1:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,1:iter],EY[2,1:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,1:iter],EY[3,1:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
points(cbind(EX[1,1:iter],EY[1,1:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,1:iter],EY[2,1:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,1:iter],EY[3,1:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "tetrachoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
points(cbind(EX[1,1:iter],EY[1,1:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,1:iter],EY[2,1:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,1:iter],EY[3,1:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "polychoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
set.seed(1998)
x1<-X2[1,]
x2<-X2[2,]
r0<-cor(x1,x2)
rho=0.5
# support points
EX <-result2$Ex
EY = result2$Ey
iter = result2$iter
lm1 <- lm(EY[,iter]~0 + EX[,iter])
plot(x1,x2,pch=19,xlim=c(-1.5,1.5),ylim=c(-1.5,1.5),xlab=expression(Z[1]),ylab=expression(Z[2]),col='gray')
points(cbind(EX[1,1:iter],EY[1,1:iter]),pch=3,col='red',type='b',lty=3)
points(cbind(EX[2,1:iter],EY[2,1:iter]),pch=3,col='blue',type='b',lty=3)
points(cbind(EX[3,1:iter],EY[3,1:iter]),pch=3,col='purple',type='b',lty=3)
# threshold
abline(a=0,b=r0,col='red')
abline(a=0,b=rho,col='green')
abline(lm1)
abline(h=0)
abline(h=1)
abline(v=-1)
abline(v=0)
legend("topleft", inset=0.03, text.width=0.5, x.intersp=0.3, c("pearson correlation","true correlation", "polychoric correlation"),
lty=c(1, 1, 1), cex=0.8,col=c("red", "green", 'black'))
grid()
esti_polychoric(bfi[,1],bfi[,2])
esti_polychoric(bfi[,1:2])
table1 = table(bfi[,1:2])
table1
esti_polychoric(table1,ct=T)
help("esti_polychoric")
build_readme()
library(devtools)
build_readme()
build()
remove.packages(IRLSpolu)
remove.packages(IRLSpoly)
options (warn = -1)
library(IRLSpoly)
library(psych)
library(polycor)
set.seed(1997)
X1 = gen_polyseries(500,0.5,-1:1)
X2 = gen_polychoric(500,0.5,-1:0,0:1)
X1[,1:6]
X2[,1:6]
table(X2[1,],X2[2,])
result1 = esti_polyserial(X1)
result2 = esti_polychoric(X2)
print("The rhohat of polyserial coefficient is:")
print(result1$rho)
print("The standard error of polyserial coefficient is:")
print(result1$std)
print("The rhohat of polyserial coefficient is:")
print(result2$rho)
print("The standard error of polyserial coefficient is:")
print(result2$std)
MLE1 = polycor::polyserial(X1[1,],X1[2,],ML=T,std.err=T)
MLE2 = polycor::polychor(X2[1,],X2[2,],ML=T,std.err=T)
print("The rhohat of polyserial coefficient is:")
print(MLE1$rho)
print("The standard error of polyserial coefficient is:")
print(sqrt(MLE1$var[1,1]))
print("The rhohat of polyserial coefficient is:")
print(MLE2$rho)
print("The standard error of polyserial coefficient is:")
print(sqrt(MLE2$var[1,1]))
help("bfi")
data(bfi)
table1 = table(bf1[,1:2])
data(bfi)
table1 = table(bfi[,1:2])
esti_polychoric(table1,ct=T)
data(bfi)
table1 = table(bfi[,1:2])
test_bfi = esti_polychoric(table1,ct=T)
print(c(test_bfi$rho,test_bfi$std))
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
lowerCor(bfi.com) #the default Pearson
lowerCor(bfi.com,method="spearman")
lowerMat(polychoric(bfi.com)$rho)
help(polychoric)
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
lowerCor(bfi.com) #the default Pearson
lowerCor(bfi.com,method="spearman")
lowerMat(polychoric(bfi.com,progress=F)$rho)
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
lowerCor(bfi.com) #the default Pearson
lowerCor(bfi.com,method="spearman")
L1 = lowerMat(polychoric(bfi.com)$rho)
L1
LIRLS = L1
diag(5)
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
print("Pearson:")
lowerCor(bfi.com) #the default Pearson
print("Spearman")
lowerCor(bfi.com,method="spearman")
print("Polychoric estimated by 2-step MLE in psych:")
lowerMat(polychoric(bfi.com)$rho)
L1 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = bfi.com[,c(i,j)]
X = t(as.matrix(x))
L1[i,j] = esti_polychoric(X)$rho
}
}
print("Polychoric estimated by IRLS:")
L1
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
print("Pearson:")
lowerCor(bfi.com) #the default Pearson
print("Spearman")
lowerCor(bfi.com,method="spearman")
print("Polychoric estimated by 2-step MLE in psych:")
lowerMat(polychoric(bfi.com)$rho)
L1 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = bfi.com[,c(i,j)]
X = t(as.matrix(x))
L1[i,j] = esti_polychoric(X)$rho
}
}
print("Polychoric estimated by IRLS:")
round(L1,2)
bfi.com <- bfi[complete.cases(bfi[1:5]),1:5]
print("Pearson:")
lowerCor(bfi.com) #the default Pearson
print("Spearman")
lowerCor(bfi.com,method="spearman")
print("Polychoric estimated by 2-step MLE in psych:")
lowerMat(polychoric(bfi.com)$rho)
L1 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = bfi.com[,c(i,j)]
X = t(as.matrix(x))
L1[i,j] = esti_polychoric(X)$rho
}
}
print("Polychoric estimated by IRLS:")
round(L1,2)
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[6:10]),6:10]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[11:15]),11:15]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
L2
data(ability)
table1 = table(ability[,1:2])
test_ability = esti_polychoric(table1,ct=T)
table1
ab.com <- ability[complete.cases(ability[11:15]),11:15]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(as.matrix(x))
L2[i,j] = esti_polychoric(X)$rho
}
}
L2
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = ab.com[,c(i,j)]
X = t(x)
L2[i,j] = esti_polychoric(X)$rho
}
}
ab.com <- ability[complete.cases(ability[1:5]),1:5]
lowerCor(ab.com) #the default Pearson
lowerMat(polychoric(ab.com)$rho)
L2 = diag(5)
for (i in 2:5) {
for (j in 1:(i-1)) {
x = na.omit(ab.com[,c(i,j)])
X = t(x)
L2[i,j] = esti_polychoric(X)$rho
}
}
print("Polychoric estimated by IRLS:")
round(L2,2)
help("ability")
